рабочий: запускает и наблюдает за задачами
Реал-я 
  +    -адрес своего шедулера получает при загрузке
  +    -задача запускается в дочернем процессе как интерпретируемый скрипт:
        *создается файл №Tast.script со скриптом задачи
        *создается файл №Tast.result для результатов выполнения скрипта
        *потоки вывода и ошибок дочернего процесса переводятся на файл №Tast.result              
        *ожидаем дочерние процессы в неблокирующем режиме
        *когда дочерний процесс завершается по любой причине,
         все что есть в файле №Tast.result отправляется шедулеру как результат выполнения задачи
  +    -как только запустил задачу(или нет) на выполнение, отправить результат шедулеру
  +    -если задача выполняется больше макс времени остановить задачу, отправить результат шедулеру
  +    -когда задача выполнилась, отправить результат шедулеру
  +    -после запуска сказать своему шедулеру что "только запустился",
        чтобы он снял прошлые задачи, если висят
  +    -каждые 20 сек слать каждому известному шедулеру сообщение "работаю"
  +    -каждые 30 сек слать шедулеру % выполнения задачи
  +    -каждое сообщение для шедулера, которое касается задачи (запущена, остановлена и тд, кроме % выполнения)
        проверять, доставлено или нет. Если не доставлено, отправлять его снова
  +    -менеджер (или шедулер) не могут выключить рабочего
  +    -менеджер может обратится к рабочему с просьбой:
        *отключить
        *поставить на паузу
        *снять с паузы
  +     конкретную задачу, после этого рабочий должен сказать шедулеру "отключена"("поставлена на паузу"..),
        чтобы тот в БД записал новый статус
  +    -менеджер может пропинговать рабочего
  +    -рабочий НЕ может обратится напрямую к менеджеру, все через шедулера
  +    -при отключении молча выйти, шедулеру ничего не говорить, текущие задачи не отключать
        (потому что при включении всеравно скажет шедулеру что "только включился", и все задачи будут сняты)

шедулер: наблюдает за рабочими
Реал-я
  +    -рабочие назначены в БД админом
  +    -когда только запустился, найти себя в tblSheduler по connectPnt,
        взять из БД все свои задачи, у которых статус "выполняется", и своих рабочих
  +    -рабочий присылает кол-во запущенных задач, когда отвечает на новую задачу
  +    -как только взял задачу из БД, сразу же в этом же запросе отметить в БД:
        [статус задачи - "взята в работу"]
        [записать свой ID]
  +    -когда задачу отправил рабочему, он ответил что "принял в работу" - отметить в БД:
        [статус задачи - "выполняется"]
        [время старта задачи]
        [записать ID рабочего]
  +    -когда задачу отправил рабочему, а он не отвечает, задачу опять включить в свою очередь,
        у рабочего понизить рейтинг, возможно кратковременная проблема со связью
  +    -если рабочий давно (2 мин) не говорил, что работает:
        [пометить рабочего в БД как "неактивный"]
        [для задач, которые в статусе "выполняется" с "моим" ID и с ID рабочего,
         статус поменять на "готова к работе" и убрать мой ID и ID рабочего]
  +    -если рабочий говорит, что задача выполнилась, отправить в БД:
        ["выполнена"]
        [записать результат задачи]
        [записать время окончания задачи]
  +    -если рабочий говорит, что задача не запустилась или вывалилась в ошибку, отправить в БД:
        ["ошибка"]
        [записать последнее слово от задачи]
  +    -если рабочий говорит, что "только запустился", отправить в БД:
        [для задач, которые в статусе "выполняется" с "моим" ID и с ID рабочего,
         статус поменять на "готова к работе" и убрать мой ID и ID рабочего]  
  +    -если рабочий загружен по максимуму или "отдыхает", не слать ему задачи       
  +    -из БД пытаться взять столько задач, сколько еще помещается в карман
  +    -за новыми задачами в БД лазить максимально часто на сколько возможно, если "карман"(допустимое количество задач) позволяет,
        для этого запускать динамически отдельный поток
  +    -любые изменения в БД (задача выполнена/в отказе/запущена, рабочий "активен/неактивен" и тд) копить и 
        отправлять скопом каждую 0.5 сек, для этого запускать динамически отдельный поток
  +    -брать из БД максимум 10000 задач(по 10 на рабочего), брать только те, у которых прошлых задач либо нет, либо завершились уже
  +    -если все рабочие не отвечают, значит сам не в сети, рабочих не отключать
  +    -при отключении все что есть на данный момент записать в БД
 
админ(менеджер): наблюдает за шедулерами и рабочими
Реал-я
       -менеджер может обратится к рабочему и сказать:
        *отключить
        *поставить на паузу
        *снять с паузы
        конкретную задачу        
       -менеджер может пинговать шедулеров и рабочих
       -менеджер может ставить на паузу и возобновлять шедулеров и рабочих,
        для этого посылает сообщения шедулеру     
       -менеджер НЕ может отключить/перезагрузить шедулера или рабочего
       -менеджер может ТОЛЬКО добавлять задачи в таблицу tbdTask, удалять задачи НЕ может
       -менеджер может ТОЛЬКО добавлять рабочих в таблицу tblWorker, удалять рабочих НЕ может
       -менеджер может ТОЛЬКО добавлять шедулеров в таблицу tblSheduler, удалять шедулеров НЕ может
       -менеджер может ТОЛЬКО добавлять задачи в общую очередь задач tblQueryTasks, удалять из очереди НЕ может
       -менеджер может менять "карман"(допустимое количество задач) у шедулера и рабочего
       -менеджер в таблице задач tblTaskTemplate может:
         *менять скрипт         
         *среднее и максимальное время выполнения задачи
       -любые изменения в БД отправлять сразу, не копить